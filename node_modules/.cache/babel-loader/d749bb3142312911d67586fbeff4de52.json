{"ast":null,"code":"import _objectSpread from\"/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{nanoid}from\"nanoid\";import{useEffect,useState}from\"react\";import Question from\"./Question\";import blobs from\"../images/blobs.png\";import blobs2 from\"../images/blobs2.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Main(){//used to switch from start screen to quiz screen\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),hasStarted=_useState2[0],setHasStarted=_useState2[1];//array of question objects\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),questions=_useState4[0],setQuestions=_useState4[1];//keeps track of if the user is done with the quiz\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isDone=_useState6[0],setIsDone=_useState6[1];//keeps track of the correct choices\nvar _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),correct=_useState8[0],setCorrect=_useState8[1];//fetches quiz data from API\nfunction fetchData(){fetch(\"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\").then(function(res){return res.json();}).then(function(data){return setQuestions(data.results.map(function(quest){var answers=[].concat(_toConsumableArray(quest.incorrect_answers),[quest.correct_answer]);answers=answers.sort(function(){return Math.random()-0.5;});return _objectSpread(_objectSpread({},quest),{},{selected:\"\",id:nanoid(),shuffledArray:answers});}));});}//fetches data when page loads\nuseEffect(function(){fetchData();},[]);//go from start screen to quiz screen\nfunction startQuiz(){setHasStarted(function(prev){return!prev;});}//when user selects an answer this function places that choise in the question object\nfunction setSelected(id,selectedAnswer){setQuestions(function(prev){return prev.map(function(quest){if(quest.id===id){return _objectSpread(_objectSpread({},quest),{},{selected:selectedAnswer});}else{return quest;}});});}//makes JSX elements of all the questions\nvar questionElements=questions.map(function(quest){var id=quest.id;return/*#__PURE__*/_jsx(Question,{setSelected:setSelected,selected:quest.selected,question:quest.question,answers:quest.shuffledArray,correct_answer:quest.correct_answer,isDone:isDone,id:id},id);});//checks user results\nfunction checkResult(){//check if every question is answered\nif(questions.every(function(quest){return quest.selected!==\"\";})){setIsDone(true);var correctAmount=0;questions.forEach(function(quest){if(quest.correct_answer===quest.selected){correctAmount++;}setCorrect(correctAmount);});}else{alert(\"Fill out all questions\");}}//resets the states to play again\nfunction playAgain(){fetchData();setIsDone(false);setCorrect(0);}return/*#__PURE__*/_jsxs(\"div\",{children:[!hasStarted&&/*#__PURE__*/_jsxs(\"div\",{className:\"start--container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Quizzical\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Some description if needed\"}),/*#__PURE__*/_jsx(\"button\",{className:\"start\",onClick:startQuiz,children:\"Start quiz\"})]}),hasStarted&&/*#__PURE__*/_jsxs(\"div\",{className:\"quiz--container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"questions--container\",children:questionElements}),isDone>0&&/*#__PURE__*/_jsxs(\"h3\",{children:[\"You scored \",correct,\"/\",questions.length,\" correct answers\"]}),isDone?/*#__PURE__*/_jsx(\"button\",{onClick:playAgain,children:\"Play again\"}):/*#__PURE__*/_jsx(\"button\",{onClick:checkResult,children:\"Check answers\"})]}),/*#__PURE__*/_jsx(\"img\",{src:blobs,id:\"blobs\",alt:\"\"}),/*#__PURE__*/_jsx(\"img\",{src:blobs2,id:\"blobs2\",alt:\"\"})]});}","map":{"version":3,"names":["nanoid","useEffect","useState","Question","blobs","blobs2","Main","hasStarted","setHasStarted","questions","setQuestions","isDone","setIsDone","correct","setCorrect","fetchData","fetch","then","res","json","data","results","map","quest","answers","incorrect_answers","correct_answer","sort","Math","random","selected","id","shuffledArray","startQuiz","prev","setSelected","selectedAnswer","questionElements","question","checkResult","every","correctAmount","forEach","alert","playAgain","length"],"sources":["/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/src/components/Main.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport blobs from \"../images/blobs.png\";\nimport blobs2 from \"../images/blobs2.png\";\n\nexport default function Main() {\n    //used to switch from start screen to quiz screen\n    const [hasStarted, setHasStarted] = useState(false);\n\n    //array of question objects\n    const [questions, setQuestions] = useState([]);\n\n    //keeps track of if the user is done with the quiz\n    const [isDone, setIsDone] = useState(false);\n\n    //keeps track of the correct choices\n    const [correct, setCorrect] = useState(0);\n\n    //fetches quiz data from API\n    function fetchData() {\n        fetch(\"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\")\n            .then((res) => res.json())\n            .then((data) =>\n                setQuestions(\n                    data.results.map((quest) => {\n                        let answers = [...quest.incorrect_answers, quest.correct_answer];\n                        answers = answers.sort(() => Math.random() - 0.5);\n                        return {\n                            ...quest,\n                            selected: \"\",\n                            id: nanoid(),\n                            shuffledArray: answers,\n                        };\n                    })\n                )\n            );\n    }\n\n    //fetches data when page loads\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    //go from start screen to quiz screen\n    function startQuiz() {\n        setHasStarted((prev) => !prev);\n    }\n\n    //when user selects an answer this function places that choise in the question object\n    function setSelected(id, selectedAnswer) {\n        setQuestions((prev) => {\n            return prev.map((quest) => {\n                if (quest.id === id) {\n                    return { ...quest, selected: selectedAnswer };\n                } else {\n                    return quest;\n                }\n            });\n        });\n    }\n\n    //makes JSX elements of all the questions\n    const questionElements = questions.map((quest) => {\n        const id = quest.id;\n\n        return (\n            <Question\n                setSelected={setSelected}\n                selected={quest.selected}\n                question={quest.question}\n                answers={quest.shuffledArray}\n                correct_answer={quest.correct_answer}\n                isDone={isDone}\n                key={id}\n                id={id}\n            />\n        );\n    });\n\n    //checks user results\n    function checkResult() {\n        //check if every question is answered\n        if (questions.every((quest) => quest.selected !== \"\")) {\n            setIsDone(true);\n            let correctAmount = 0;\n            questions.forEach((quest) => {\n                if (quest.correct_answer === quest.selected) {\n                    correctAmount++;\n                }\n                setCorrect(correctAmount);\n            });\n        } else {\n            alert(\"Fill out all questions\");\n        }\n    }\n\n    //resets the states to play again\n    function playAgain() {\n        fetchData();\n        setIsDone(false);\n        setCorrect(0);\n    }\n\n    return (\n        <div>\n            {/* start screen */}\n            {!hasStarted && (\n                <div className=\"start--container\">\n                    <h1>Quizzical</h1>\n                    <p>Some description if needed</p>\n                    <button className=\"start\" onClick={startQuiz}>\n                        Start quiz\n                    </button>\n                </div>\n            )}\n            {/* quiz screen */}\n            {hasStarted && (\n                <div className=\"quiz--container\">\n                    <div className=\"questions--container\">{questionElements}</div>\n                    {isDone > 0 && (\n                        <h3>\n                            You scored {correct}/{questions.length} correct answers\n                        </h3>\n                    )}\n                    {isDone ? (\n                        <button onClick={playAgain}>Play again</button>\n                    ) : (\n                        <button onClick={checkResult}>Check answers</button>\n                    )}\n                </div>\n            )}\n\n            {/* Background */}\n            <img src={blobs} id=\"blobs\" alt=\"\"></img>\n            <img src={blobs2} id=\"blobs2\" alt=\"\"></img>\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}