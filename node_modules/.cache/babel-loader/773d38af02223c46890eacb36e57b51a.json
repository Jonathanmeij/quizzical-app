{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport blobs from \"../images/blobs.png\";\nimport blobs2 from \"../images/blobs2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [hasStarted, setHasStarted] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    const data = fetch(\"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\").then(res => res.json()).then(data => setQuestions(data.results.map(quest => {\n      return { ...quest,\n        selected: \"\",\n        id: nanoid()\n      };\n    })));\n  }, [1]);\n  console.log(questions);\n\n  function startQuiz() {\n    setHasStarted(prev => !prev);\n  }\n\n  function setSelected(id, selectedAnswer) {\n    setQuestions(prev => {\n      return prev.map(quest => {\n        if (quest.id === id) {\n          console.log(selectedAnswer);\n          return { ...quest,\n            selected: selectedAnswer\n          };\n        } else {\n          return quest;\n        }\n      });\n    });\n  }\n\n  const questionElements = questions.map(quest => {\n    const id = quest.id;\n    const answers = [...quest.incorrect_answers, quest.correct_answer];\n    const shuffledArray = answers.sort(() => Math.random() - 0.5);\n    return /*#__PURE__*/_jsxDEV(Question, {\n      setSelected: setSelected,\n      question: quest.question,\n      answers: shuffledArray,\n      id: id\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!hasStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start--container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quizzical\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some description if needed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startQuiz,\n        children: \"Start quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), hasStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: questionElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blobs,\n      id: \"blobs\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blobs2,\n      id: \"blobs2\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n} // {\n//     \"category\": \"General Knowledge\",\n//     \"type\": \"multiple\",\n//     \"difficulty\": \"medium\",\n//     \"question\": \"Which language is NOT Indo-European?\",\n//     \"correct_answer\": \"Hungarian\",\n//     \"incorrect_answers\": [\n//       \"Russian\",\n//       \"Greek\",\n//       \"Latvian\"\n//     ]\n//   }\n\n_s(Main, \"sYK+l8YuFtj+r8Ljwn9s5st1yVw=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["nanoid","useEffect","useState","Question","blobs","blobs2","Main","hasStarted","setHasStarted","questions","setQuestions","data","fetch","then","res","json","results","map","quest","selected","id","console","log","startQuiz","prev","setSelected","selectedAnswer","questionElements","answers","incorrect_answers","correct_answer","shuffledArray","sort","Math","random","question"],"sources":["/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/src/components/Main.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport blobs from \"../images/blobs.png\";\nimport blobs2 from \"../images/blobs2.png\";\n\nexport default function Main() {\n    const [hasStarted, setHasStarted] = useState(false);\n    const [questions, setQuestions] = useState([]);\n\n    useEffect(() => {\n        const data = fetch(\n            \"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\"\n        )\n            .then((res) => res.json())\n            .then((data) =>\n                setQuestions(\n                    data.results.map((quest) => {\n                        return { ...quest, selected: \"\", id: nanoid() };\n                    })\n                )\n            );\n    }, [1]);\n\n    console.log(questions);\n    function startQuiz() {\n        setHasStarted((prev) => !prev);\n    }\n\n    function setSelected(id, selectedAnswer) {\n        setQuestions((prev) => {\n            return prev.map((quest) => {\n                if (quest.id === id) {\n                    console.log(selectedAnswer);\n                    return { ...quest, selected: selectedAnswer };\n                } else {\n                    return quest;\n                }\n            });\n        });\n    }\n\n    const questionElements = questions.map((quest) => {\n        const id = quest.id;\n        const answers = [...quest.incorrect_answers, quest.correct_answer];\n        const shuffledArray = answers.sort(() => Math.random() - 0.5);\n\n        return (\n            <Question\n                setSelected={setSelected}\n                question={quest.question}\n                answers={shuffledArray}\n                key={id}\n                id={id}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {/* start screen */}\n            {!hasStarted && (\n                <div className=\"start--container\">\n                    <h1>Quizzical</h1>\n                    <p>Some description if needed</p>\n                    <button className=\"start\" onClick={startQuiz}>\n                        Start quiz\n                    </button>\n                </div>\n            )}\n            {/* quiz screen */}\n            {hasStarted && (\n                <div>\n                    <div>{questionElements}</div>\n                    <button>Check answers</button>\n                </div>\n            )}\n\n            {/* Background */}\n            <img src={blobs} id=\"blobs\" alt=\"\"></img>\n            <img src={blobs2} id=\"blobs2\" alt=\"\"></img>\n        </div>\n    );\n}\n// {\n//     \"category\": \"General Knowledge\",\n//     \"type\": \"multiple\",\n//     \"difficulty\": \"medium\",\n//     \"question\": \"Which language is NOT Indo-European?\",\n//     \"correct_answer\": \"Hungarian\",\n//     \"incorrect_answers\": [\n//       \"Russian\",\n//       \"Greek\",\n//       \"Latvian\"\n//     ]\n//   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}