{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport blobs from \"../images/blobs.png\";\nimport blobs2 from \"../images/blobs2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  //used to switch from start screen to quiz screen\n  const [hasStarted, setHasStarted] = useState(false); //array of question objects\n\n  const [questions, setQuestions] = useState([]); //keeps track of if the user is done with the quiz\n\n  const [isDone, setIsDone] = useState(false); //keeps track of the correct choices\n\n  const [correct, setCorrect] = useState(0); //sets amount of questions\n\n  const [questionAmount, setQuestionAmount] = useState(5); //fetches quiz data from API\n\n  function fetchData() {\n    fetch(\"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\").then(res => res.json()).then(data => setQuestions(data.results.map(quest => {\n      let answers = [...quest.incorrect_answers, quest.correct_answer];\n      answers = answers.sort(() => Math.random() - 0.5);\n      return { ...quest,\n        selected: \"\",\n        id: nanoid(),\n        shuffledArray: answers\n      };\n    })));\n  } //fetches data when page loads\n\n\n  useEffect(() => {\n    fetchData();\n  }, []); //go from start screen to quiz screen\n\n  function startQuiz() {\n    setHasStarted(prev => !prev);\n  } //when user selects an answer this function places that choise in the question object\n\n\n  function setSelected(id, selectedAnswer) {\n    setQuestions(prev => {\n      return prev.map(quest => {\n        if (quest.id === id) {\n          return { ...quest,\n            selected: selectedAnswer\n          };\n        } else {\n          return quest;\n        }\n      });\n    });\n  } //makes JSX elements of all the questions\n\n\n  const questionElements = questions.map(quest => {\n    const id = quest.id;\n    return /*#__PURE__*/_jsxDEV(Question, {\n      setSelected: setSelected,\n      selected: quest.selected,\n      question: quest.question,\n      answers: quest.shuffledArray,\n      correct_answer: quest.correct_answer,\n      isDone: isDone,\n      id: id\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }); //checks user results\n\n  function checkResult() {\n    //check if every question is answered\n    if (questions.every(quest => quest.selected !== \"\")) {\n      setIsDone(true);\n      let correctAmount = 0;\n      questions.forEach(quest => {\n        if (quest.correct_answer === quest.selected) {\n          correctAmount++;\n        }\n\n        setCorrect(correctAmount);\n      });\n    } else {\n      alert(\"Fill out all questions\");\n    }\n  } //resets the states to play again\n\n\n  function playAgain() {\n    fetchData();\n    setIsDone(false);\n    setCorrect(0);\n  }\n\n  function handleChange(event) {\n    setQuestionAmount(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!hasStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start--container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quizzical\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some description if needed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Amount of questions: \", questionAmount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slidecontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"10\",\n          value: questionAmount,\n          onChange: handleChange,\n          className: \"slider\",\n          id: \"myRange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startQuiz,\n        children: \"Start quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this), hasStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz--container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions--container\",\n        children: questionElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), isDone > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"You scored \", correct, \"/\", questions.length, \" correct answers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }, this), isDone ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playAgain,\n        children: \"Play again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkResult,\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blobs,\n      id: \"blobs\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blobs2,\n      id: \"blobs2\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"tdqT1cmE+vW8B17B/zwRjvzoYpc=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["nanoid","useEffect","useState","Question","blobs","blobs2","Main","hasStarted","setHasStarted","questions","setQuestions","isDone","setIsDone","correct","setCorrect","questionAmount","setQuestionAmount","fetchData","fetch","then","res","json","data","results","map","quest","answers","incorrect_answers","correct_answer","sort","Math","random","selected","id","shuffledArray","startQuiz","prev","setSelected","selectedAnswer","questionElements","question","checkResult","every","correctAmount","forEach","alert","playAgain","handleChange","event","target","value","length"],"sources":["/Users/jonathanvdmeij/Coding/WebDevelopment/React-course/quizzical/src/components/Main.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport blobs from \"../images/blobs.png\";\nimport blobs2 from \"../images/blobs2.png\";\n\nexport default function Main() {\n    //used to switch from start screen to quiz screen\n    const [hasStarted, setHasStarted] = useState(false);\n\n    //array of question objects\n    const [questions, setQuestions] = useState([]);\n\n    //keeps track of if the user is done with the quiz\n    const [isDone, setIsDone] = useState(false);\n\n    //keeps track of the correct choices\n    const [correct, setCorrect] = useState(0);\n\n    //sets amount of questions\n    const [questionAmount, setQuestionAmount] = useState(5);\n\n    //fetches quiz data from API\n    function fetchData() {\n        fetch(\"https://opentdb.com/api.php?amount=5&category=9&difficulty=medium\")\n            .then((res) => res.json())\n            .then((data) =>\n                setQuestions(\n                    data.results.map((quest) => {\n                        let answers = [...quest.incorrect_answers, quest.correct_answer];\n                        answers = answers.sort(() => Math.random() - 0.5);\n                        return {\n                            ...quest,\n                            selected: \"\",\n                            id: nanoid(),\n                            shuffledArray: answers,\n                        };\n                    })\n                )\n            );\n    }\n\n    //fetches data when page loads\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    //go from start screen to quiz screen\n    function startQuiz() {\n        setHasStarted((prev) => !prev);\n    }\n\n    //when user selects an answer this function places that choise in the question object\n    function setSelected(id, selectedAnswer) {\n        setQuestions((prev) => {\n            return prev.map((quest) => {\n                if (quest.id === id) {\n                    return { ...quest, selected: selectedAnswer };\n                } else {\n                    return quest;\n                }\n            });\n        });\n    }\n\n    //makes JSX elements of all the questions\n    const questionElements = questions.map((quest) => {\n        const id = quest.id;\n\n        return (\n            <Question\n                setSelected={setSelected}\n                selected={quest.selected}\n                question={quest.question}\n                answers={quest.shuffledArray}\n                correct_answer={quest.correct_answer}\n                isDone={isDone}\n                key={id}\n                id={id}\n            />\n        );\n    });\n\n    //checks user results\n    function checkResult() {\n        //check if every question is answered\n        if (questions.every((quest) => quest.selected !== \"\")) {\n            setIsDone(true);\n            let correctAmount = 0;\n            questions.forEach((quest) => {\n                if (quest.correct_answer === quest.selected) {\n                    correctAmount++;\n                }\n                setCorrect(correctAmount);\n            });\n        } else {\n            alert(\"Fill out all questions\");\n        }\n    }\n\n    //resets the states to play again\n    function playAgain() {\n        fetchData();\n        setIsDone(false);\n        setCorrect(0);\n    }\n\n    function handleChange(event) {\n        setQuestionAmount(event.target.value);\n    }\n\n    return (\n        <div>\n            {/* start screen */}\n            {!hasStarted && (\n                <div className=\"start--container\">\n                    <h1>Quizzical</h1>\n                    <p>Some description if needed</p>\n                    <h2>Amount of questions: {questionAmount}</h2>\n                    <div className=\"slidecontainer\">\n                        <input\n                            type=\"range\"\n                            min=\"1\"\n                            max=\"10\"\n                            value={questionAmount}\n                            onChange={handleChange}\n                            className=\"slider\"\n                            id=\"myRange\"\n                        ></input>\n                    </div>\n                    <button className=\"start\" onClick={startQuiz}>\n                        Start quiz\n                    </button>\n                </div>\n            )}\n            {/* quiz screen */}\n            {hasStarted && (\n                <div className=\"quiz--container\">\n                    <div className=\"questions--container\">{questionElements}</div>\n                    {isDone > 0 && (\n                        <h3>\n                            You scored {correct}/{questions.length} correct answers\n                        </h3>\n                    )}\n                    {isDone ? (\n                        <button onClick={playAgain}>Play again</button>\n                    ) : (\n                        <button onClick={checkResult}>Check answers</button>\n                    )}\n                </div>\n            )}\n\n            {/* Background */}\n            <img src={blobs} id=\"blobs\" alt=\"\"></img>\n            <img src={blobs2} id=\"blobs2\" alt=\"\"></img>\n        </div>\n    );\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAC3B;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C,CAF2B,CAI3B;;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C,CAL2B,CAO3B;;EACA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC,CAR2B,CAU3B;;EACA,MAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC,CAX2B,CAa3B;;EACA,MAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,CAAD,CAApD,CAd2B,CAgB3B;;EACA,SAASe,SAAT,GAAqB;IACjBC,KAAK,CAAC,mEAAD,CAAL,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWG,IAAD,IACFZ,YAAY,CACRY,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAkBC,KAAD,IAAW;MACxB,IAAIC,OAAO,GAAG,CAAC,GAAGD,KAAK,CAACE,iBAAV,EAA6BF,KAAK,CAACG,cAAnC,CAAd;MACAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAnC,CAAV;MACA,OAAO,EACH,GAAGN,KADA;QAEHO,QAAQ,EAAE,EAFP;QAGHC,EAAE,EAAEjC,MAAM,EAHP;QAIHkC,aAAa,EAAER;MAJZ,CAAP;IAMH,CATD,CADQ,CAHpB;EAgBH,CAlC0B,CAoC3B;;;EACAzB,SAAS,CAAC,MAAM;IACZgB,SAAS;EACZ,CAFQ,EAEN,EAFM,CAAT,CArC2B,CAyC3B;;EACA,SAASkB,SAAT,GAAqB;IACjB3B,aAAa,CAAE4B,IAAD,IAAU,CAACA,IAAZ,CAAb;EACH,CA5C0B,CA8C3B;;;EACA,SAASC,WAAT,CAAqBJ,EAArB,EAAyBK,cAAzB,EAAyC;IACrC5B,YAAY,CAAE0B,IAAD,IAAU;MACnB,OAAOA,IAAI,CAACZ,GAAL,CAAUC,KAAD,IAAW;QACvB,IAAIA,KAAK,CAACQ,EAAN,KAAaA,EAAjB,EAAqB;UACjB,OAAO,EAAE,GAAGR,KAAL;YAAYO,QAAQ,EAAEM;UAAtB,CAAP;QACH,CAFD,MAEO;UACH,OAAOb,KAAP;QACH;MACJ,CANM,CAAP;IAOH,CARW,CAAZ;EASH,CAzD0B,CA2D3B;;;EACA,MAAMc,gBAAgB,GAAG9B,SAAS,CAACe,GAAV,CAAeC,KAAD,IAAW;IAC9C,MAAMQ,EAAE,GAAGR,KAAK,CAACQ,EAAjB;IAEA,oBACI,QAAC,QAAD;MACI,WAAW,EAAEI,WADjB;MAEI,QAAQ,EAAEZ,KAAK,CAACO,QAFpB;MAGI,QAAQ,EAAEP,KAAK,CAACe,QAHpB;MAII,OAAO,EAAEf,KAAK,CAACS,aAJnB;MAKI,cAAc,EAAET,KAAK,CAACG,cAL1B;MAMI,MAAM,EAAEjB,MANZ;MAQI,EAAE,EAAEsB;IARR,GAOSA,EAPT;MAAA;MAAA;MAAA;IAAA,QADJ;EAYH,CAfwB,CAAzB,CA5D2B,CA6E3B;;EACA,SAASQ,WAAT,GAAuB;IACnB;IACA,IAAIhC,SAAS,CAACiC,KAAV,CAAiBjB,KAAD,IAAWA,KAAK,CAACO,QAAN,KAAmB,EAA9C,CAAJ,EAAuD;MACnDpB,SAAS,CAAC,IAAD,CAAT;MACA,IAAI+B,aAAa,GAAG,CAApB;MACAlC,SAAS,CAACmC,OAAV,CAAmBnB,KAAD,IAAW;QACzB,IAAIA,KAAK,CAACG,cAAN,KAAyBH,KAAK,CAACO,QAAnC,EAA6C;UACzCW,aAAa;QAChB;;QACD7B,UAAU,CAAC6B,aAAD,CAAV;MACH,CALD;IAMH,CATD,MASO;MACHE,KAAK,CAAC,wBAAD,CAAL;IACH;EACJ,CA5F0B,CA8F3B;;;EACA,SAASC,SAAT,GAAqB;IACjB7B,SAAS;IACTL,SAAS,CAAC,KAAD,CAAT;IACAE,UAAU,CAAC,CAAD,CAAV;EACH;;EAED,SAASiC,YAAT,CAAsBC,KAAtB,EAA6B;IACzBhC,iBAAiB,CAACgC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;EACH;;EAED,oBACI;IAAA,WAEK,CAAC3C,UAAD,iBACG;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA,oCAA0BQ,cAA1B;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII;QAAK,SAAS,EAAC,gBAAf;QAAA,uBACI;UACI,IAAI,EAAC,OADT;UAEI,GAAG,EAAC,GAFR;UAGI,GAAG,EAAC,IAHR;UAII,KAAK,EAAEA,cAJX;UAKI,QAAQ,EAAEgC,YALd;UAMI,SAAS,EAAC,QANd;UAOI,EAAE,EAAC;QAPP;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAJJ,eAeI;QAAQ,SAAS,EAAC,OAAlB;QAA0B,OAAO,EAAEZ,SAAnC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAfJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAHR,EAwBK5B,UAAU,iBACP;MAAK,SAAS,EAAC,iBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,UAAuCgC;MAAvC;QAAA;QAAA;QAAA;MAAA,QADJ,EAEK5B,MAAM,GAAG,CAAT,iBACG;QAAA,0BACgBE,OADhB,OAC0BJ,SAAS,CAAC0C,MADpC;MAAA;QAAA;QAAA;QAAA;MAAA,QAHR,EAOKxC,MAAM,gBACH;QAAQ,OAAO,EAAEmC,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADG,gBAGH;QAAQ,OAAO,EAAEL,WAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVR;IAAA;MAAA;MAAA;MAAA;IAAA,QAzBR,eAyCI;MAAK,GAAG,EAAErC,KAAV;MAAiB,EAAE,EAAC,OAApB;MAA4B,GAAG,EAAC;IAAhC;MAAA;MAAA;MAAA;IAAA,QAzCJ,eA0CI;MAAK,GAAG,EAAEC,MAAV;MAAkB,EAAE,EAAC,QAArB;MAA8B,GAAG,EAAC;IAAlC;MAAA;MAAA;MAAA;IAAA,QA1CJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA8CH;;GAvJuBC,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}